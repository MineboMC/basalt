plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.1.20-Beta1'
    id 'org.jetbrains.kotlin.kapt' version '2.1.20-Beta1'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'maven-publish'
}

allprojects {
    group = 'net.minebo.basalt'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.enonic.com/public/' }
        maven { url "https://oss.sonatype.org/content/groups/public/" }
        maven { url "https://repo.aikar.co/content/groups/aikar/" }
        maven { url 'https://papermc.io/repo/repository/maven-public/' }
        maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
        maven { url "https://repo.glaremasters.me/repository/public/" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.kapt"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "maven-publish"

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib"

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.22'
        kapt 'org.projectlombok:lombok:1.18.22'

        // Apache
        implementation 'org.apache.maven:maven-artifact:3.0.3'

        // Honey
        implementation files('../libraries/Honey+1.0.0.jar')

        // PlaceholderAPI
        implementation files('../libraries/PlaceholderAPI-2.11.6.jar')
    }

    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(11))
    }

    tasks.named('compileKotlin') {
        kotlinOptions.javaParameters = true
        kotlinOptions.jvmTarget = "11"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

tasks.named('shadowJar') {
    archiveClassifier.set('') // Remove the 'all' classifier
    mergeServiceFiles()

    // Include outputs from all subprojects
    subprojects.each { subproject ->
        from(subproject.sourceSets.main.output)
    }
}

artifacts {
    archives tasks.named('shadowJar').get()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact tasks.named('shadowJar').get()
        }
    }
}
